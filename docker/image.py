"""Docker builder for QGIS images."""

import os
import sys
import time

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/..'))

import cli

USAGE = """
QGIS Image Builder
~~~~~~~~~~~~~~~~~~
  
    python3 image.py <version> <options>

<version>
    3-digit QGIS version, e.g. "3.34.0"
        
Options:

    -arch <architecture>
        image architecture "amd64" (default) or "arm64" 

    -builddir <dir>
        directory to store Dockerfile and assets

    -major
        tag the image with the major version (e.g. "3.34")

    -debug
        build the debug image

    -no-cache
        disable cache

    -prep
        prepare the build, but don't run it

    -print
        just print the Dockerfile, do not build

    -vendor <name>
        vendor name for the Dockerfile

"""


class Builder:
    ubuntu_name = 'jammy'
    ubuntu_version = '22.04'

    arch = 'amd64'
    vendor = 'gbdconsult'

    gws_user_uid = 1000
    gws_user_gid = 1000
    gws_user_name = 'gws'

    packages_url = 'https://files.gbd-websuite.de'

    def __init__(self, args):
        self.this_dir = os.path.abspath(os.path.dirname(__file__))
        self.skip_cache = '_skip_cache_' + str(int(time.time() * 1000000)) + '_'

        self.args = args

        self.arch = args.get('arch') or self.arch
        self.build_root_dir = args.get('builddir') or os.path.abspath(f'{self.this_dir}/../../build')
        self.mode = 'debug' if self.args.get('debug') else 'release'
        self.vendor = args.get('vendor') or self.vendor

        v = self.args.get(1, '').split('.')
        if len(v) != 3 or any(not s.isdigit() for s in v):
            cli.fatal('<version> must be xx.yy.zz.ii')
        self.version = v[0] + '.' + v[1] + '.' + v[2]
        self.version_major = v[0] + '.' + v[1]

        self.image_name = f'{self.vendor}/gbd-qgis-server-{self.arch}'
        if self.mode == 'debug':
            self.image_name += '-debug'
        self.image_full_name = f'{self.image_name}:{self.version}'

        self.context_dir = f'{self.build_root_dir}/{self.image_name}_{self.version}'
        self.image_description = f'QGIS Server {self.version}'

        self.qgis_apts = lines(cli.read_file(f'{self.this_dir}/apt.lst'))
        self.qgis_pips = lines(cli.read_file(f'{self.this_dir}/pip.lst'))

        # resources from the NorBit alkis plugin
        self.alkisplugin_package = 'alkisplugin'
        self.alkisplugin_url = f'{self.packages_url}/{self.alkisplugin_package}.tar.gz'

        # our qgis tarball (see /compile/helper.py)
        self.qgis_package = f'gbd-qgis-server-{self.version}-{self.ubuntu_version}-{self.arch}-{self.mode}'
        self.qgis_url = f'{self.packages_url}/{self.qgis_package}.tar.gz'

    def main(self):
        nc = '--no-cache' if self.args.get('no-cache') else ''
        cmd = f'cd {self.context_dir} && docker build --progress plain -f Dockerfile -t {self.image_full_name} {nc} .'

        if self.args.get('print'):
            print(self.dockerfile())
            return

        self.prepare()
        if self.args.get('prep'):
            cli.info(f'prepared in {self.context_dir}, now run:')
            print(cmd)
            return

        cli.run(cmd)
        cli.run(f'rm -fr {self.context_dir}/_skip_cache_*')

        if self.args.get('major'):
            cli.run(f'docker tag {self.image_full_name} {self.image_name}:{self.version_major}')

    def prepare(self):
        if not os.path.isdir(self.context_dir):
            cli.run(f'mkdir -p {self.context_dir}')

        os.chdir(self.context_dir)

        cli.write_file(f'Dockerfile', self.dockerfile())

        if not os.path.isdir(f'{self.qgis_package}'):
            if not os.path.isfile(f'{self.qgis_package}.tar.gz'):
                if os.path.isfile(f'{self.build_root_dir}/{self.qgis_package}.tar.gz'):
                    cli.run(f"cp {self.build_root_dir}/{self.qgis_package}.tar.gz {self.context_dir}")
                else:
                    cli.run(f"curl -sL '{self.qgis_url}' -o {self.qgis_package}.tar.gz")
                cli.run(f"tar -xzf {self.qgis_package}.tar.gz")

        if not os.path.isdir(f'{self.qgis_package}/usr/share/{self.alkisplugin_package}'):
            cli.run(f"curl -sL '{self.alkisplugin_url}' -o {self.alkisplugin_package}.tar.gz")
            cli.run(f"tar -xzf {self.alkisplugin_package}.tar.gz")
            cli.run(f"mv {self.alkisplugin_package} {self.qgis_package}/usr/share")

        # our stuff (always skip the cache for these)

        cli.run(f'cp {self.this_dir}/qgis-start.py {self.skip_cache}qgis-start.py')
        cli.run(f'cp {self.this_dir}/qgis-start.sh {self.skip_cache}qgis-start.sh')

    def dockerfile(self):
        df = []
        __ = df.append

        __(f'#')
        __(f'# {self.image_full_name}')
        __(f'# generated by gbd-websuite/install/image.py')
        __(f'#')
        __(f'FROM --platform=linux/{self.arch} ubuntu:{self.ubuntu_version}')
        __(f'LABEL Description="{self.image_description}" Vendor="{self.vendor}" Version="{self.version}"')

        __('RUN ' + commands(f'''
            groupadd -g {self.gws_user_gid} {self.gws_user_name}
            useradd -M -u {self.gws_user_uid} -g {self.gws_user_gid} {self.gws_user_name}
        '''))

        apts = ' '.join(f"'{s}'" for s in self.qgis_apts)
        pips = ' '.join(f"'{s}'" for s in self.qgis_pips)

        __('RUN ' + commands(f'''
            set -x
            apt update
            apt install -y software-properties-common
            apt update
            DEBIAN_FRONTEND=noninteractive apt install -y {apts}
            apt-get -y clean
            apt-get -y purge --auto-remove
        '''))

        if pips:
            __(f'RUN pip3 install --no-cache-dir {pips}')

        __(f'COPY {self.qgis_package}/usr /usr')

        __(f'COPY {self.skip_cache}qgis-start.sh /qgis-start.sh')
        __(f'COPY {self.skip_cache}qgis-start.py /qgis-start.py')
        __(f'RUN chmod 777 /qgis-start.sh')
        __(f'ENV QT_SELECT=5')
        __(f'ENV LANG=C.UTF-8')
        __(f'CMD ["/qgis-start.sh"]')

        return '\n'.join(df) + '\n'


###

def main(args):
    b = Builder(args)
    b.main()
    return 0


def commands(txt):
    return ' \\\n&& '.join(lines(txt))


def lines(txt):
    ls = []
    for s in txt.strip().splitlines():
        s = s.strip()
        if s and not s.startswith('#'):
            ls.append(s)
    return ls


def uniq(ls):
    s = set()
    r = []
    for x in ls:
        if x not in s:
            r.append(x)
            s.add(x)
    return r


if __name__ == '__main__':
    cli.main('image.py', main, USAGE)
